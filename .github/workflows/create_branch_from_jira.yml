name: Create Branch from Jira Issue

on:
  workflow_dispatch:
    inputs:
      jira_number:
        description: 'Jira Issue Key'
        required: true
      jira_type:
        description: 'Jira Issue Type'
        required: true
      jira_title:
        description: 'Jira Issue Title'
        required: true

jobs:
  create-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get all branches

      - name: Extract branch details
        id: extract_branch
        run: |
          # Extract data from client_payload
          ISSUE_KEY="${{ github.event.inputs.jira_number}}"
          ISSUE_TYPE="${{ github.event.inputs.jira_type }}"
          ISSUE_TITLE="${{ github.event.inputs.jira_title}}"
          BASE_BRANCH='main'

          echo $ISSUE_KEY
          echo $ISSUE_TYPE
          echo $ISSUE_TITLE

          # Determine branch prefix based on issue type
          if [ "$ISSUE_TYPE" = "Bug" ]; then
            PREFIX="bugfix"
          elif [ "$ISSUE_TYPE" = "Story" ]; then
            PREFIX="feature"
          else
            # Default prefix for other issue types
            PREFIX="task"
          fi

          # Format the branch name
          FORMATTED_SUMMARY=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
          BRANCH_NAME="$PREFIX/$ISSUE_KEY-$FORMATTED_SUMMARY"

          echo $BRANCH_NAME

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT

      # - name: Create branch
      #   run: |
      #     BRANCH_NAME="${{ steps.extract_branch.outputs.branch_name }}"
      #     BASE_BRANCH="${{ steps.extract_branch.outputs.base_branch }}"

      #     # Check if branch already exists
      #     if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
      #       echo "Branch $BRANCH_NAME already exists. Skipping creation."
      #       exit 0
      #     fi

      #     # Create and push branch
      #     git checkout $BASE_BRANCH
      #     git pull origin $BASE_BRANCH
      #     git checkout -b $BRANCH_NAME
      #     git push origin $BRANCH_NAME

      #     echo "Created branch $BRANCH_NAME from $BASE_BRANCH"

      # - name: Comment on Jira issue (optional)
      #   if: ${{ github.event.client_payload.jira_update == true }}
      #   run: |
      #     # This would require additional setup with Jira API
      #     # You can use a Jira CLI action or make an API call
      #     echo "Would update Jira with branch info"
      #     # Example with curl if you set up authentication
      #     # curl -X POST \
      #     #  -H "Authorization: Bearer $JIRA_TOKEN" \
      #     #  -H "Content-Type: application/json" \
      #     #  --data '{"body": "Created branch [[${{ steps.extract_branch.outputs.branch_name }}|https://github.com/${{ github.repository }}/tree/${{ steps.extract_branch.outputs.branch_name }}]]"}' \
      #     #  https://your-domain.atlassian.net/rest/api/3/issue/${{ github.event.client_payload.issue_key }}/comment
